%-------------------------- CLINGO MODEL BASED ANDROID PERMISSION SYSTEM --------------------------%


%------------- PARAMETERS -------------%

% NB APPS SYST GENERATED
#const as = 1.
#const ps = as.
% same amount of apps, each apps define his own perms/groups.

% NB APPS USER GENERATED
#const a = 1.
#const p = 1. % must be >0
#const g = p.
#const m = 3. % need to be >=a

% NB STEPS
#const s = 5.

%--------------------------------------%







%----------- Initialization -----------%


%--------- System ---------%
as { appSyst(A): A=1..as }.

manifSyst(A,A) :- appSyst(A).
permSyst(A, A, 2):- manifSyst(A,A).



%ps { permSyst(P,P,L): P=1..ps, L=2 } ps. %each permSyst have a unique id and group.

% syst perms cannot have the same id
%:- permSyst(X1, Y1, Z1), permSyst(X1, Y2, Z2), Y1 != Y2.
%:- permSyst(X1, Y1, Z1), permSyst(X1, Y2, Z2), Z1 != Z2.

% syst perms cannot have the same group
%:- permSyst(X1, Y1, Z1), permSyst(X2, Y1, Z2), X1 != X2.
%:- permSyst(X1, Y1, Z1), permSyst(X2, Y1, Z2), Z1 != Z2.

%as { manifSyst(A,D): A=1..as, D=1..ps} as.

%--------------------------%



%---------- User ----------%
% app(idApp)
1 { app(A): A=as+1..a+as}.


%-- PERMS --%

% Permissions may change over action

% permManifest(idPerm, idGrp, pl, syst)
% perm in manifest
s*p { permManifest(P,G,L,S): P=ps+1..p+ps, G=0..g+ps, L=1..2, S=1..s }.





% Normal perms cannot be grouped
:- permManifest(P,G,1,S), G!=0.

% perms cannot have the same id at the same S
:- permManifest(X1, Y1, Z1, S2), permManifest(X1, Y2, Z2, S2), Y1 != Y2.
:- permManifest(X1, Y1, Z1, S2), permManifest(X1, Y2, Z2, S2), Z1 != Z2.


%-- MANIFEST --%

% all possibilities of manifest
{ manifest(M,U,D): M=as+1..as+m, U=1..p+ps, D=ps+1..p+ps }.

% manifest that doesn't define any perms
{ manifest(M,U): M=as+m+1..as+m+m, U=1..p+ps }.

% all posibilities of perms definitions and utilizations
{use(U,P) : U=1..p+ps , P=1..p+ps}. % U to use different perms in same time
{usrP(D,P) : D=ps..p+ps, P=ps+1..ps+p}. % D to define different perms in same time

% if usrP, then we must have a perm
:- usrP(D,P), not permManifest(P,_,_,_).

% cannot define a same perm
%:- usrP(D1,P), usrP(D2,P), D1!=D2.

% if manifest(M,U,D), then we must have usrP(D,_) and use(U,_)
:- manifest(M,U,D), not usrP(D,_).
:- manifest(M,U,D), not use(U,_).

:- manifest(M,U1), manifest(M,U2), U1 != U2.
:- manifest(M1,U), manifest(M2,U), M1 != M2.


% Only one manifest per id
:- manifest(M, U1, D1), manifest(M, U2, D2), D1 != D2.
:- manifest(M, U1, D1), manifest(M, U2, D2), U1 != U2.

:- manifest(M,U1), manifest(M,U2,D).

%--------------------------%

%--------------------------------------%



%-------------- Actions ---------------%

action(1..s).


% generate all possibilities of actions
1 { install(A,M,S) : app(A), manifest(M,_,_) ; install(A,M,S) : app(A), manifest(M,_) ; uninstall(A,S) : app(A) ; run(A,S) : app(A) ; stop(A,S) : app(A) ; grant(A,P,S) : app(A),permManifest(P,_,_,S) ; grant(A,P,S) : app(A),permSyst(P,_,_) ; grantAuto(A,P,S) : app(A), permManifest(P,_,_,S) ; grantAuto(A,P,S) : app(A), permSyst(P,_,_) ; reboot(S) ; update(A,M,S) : app(A), manifest(M,_,_) ; update(A,M,S) : app(A), manifest(M,_)} 1 :- action(S).

% grantedOneTime not in this version of Android




%--- INSTALL / UNINSTALL ---%

% app/perms syst are considered as installed and defined
installed(A,M,S) :- appSyst(A), action(S), manifSyst(M,D).
defPerm(A,P,S) :- appSyst(A),permSyst(P,_,_), action(S).



% if we install at S, then it's installed at S+1
installed(A,M,S+1) :- install(A,M,S).


perm(P,G,L,S+1) :- install(A,M,S), manifest(M,U,D), usrP(D,P), not perm(P,_,_,S), permManifest(P,G,L,S).


% we must have the perm at S+1
% this is ensured that we dont have any other perms, because we cannot have perm of the same id

% if we dont reboot or update, the perm is still the same
perm(P,G,L,S+1) :- perm(P,G,L,S), installed(A,M,S+1), defPerm(A,P,S+1), not update(A,_,S), not reboot(S).


perm(P,G,L,S+1) :- permManifest(P,G,L,S+1), update(A,M,S), defPerm(A,P,S+1), not updateNormalToDangerousPerm(P,S), not updateDangerousPerm(P,S).


% if the update try to upgrade perm normal to dangerous, then it prevents against upgrade attack
perm(P,G,L,S+1) :- perm(P,G,L,S), updateNormalToDangerousPerm(P,S).

% if we update a perm from dangerous to dangerous
perm(P,G,L,S+1) :- updateDangerousPerm(P,S), not updateNormalToDangerousPerm(P,S), update(A,M,S), manifest(M,U,D), usrP(D,P), defPerm(A,P,S+1), permManifest(P,G,L,S+1).

% if we reboot, the perms becomes the ones in the manifest
perm(P,G,L,S+1) :- reboot(S), installed(A,M,S), defPerm(A,P,S+1), permManifest(P,G,L,S).



% if we have permManifest at S, we have it at S+1 if we dont make an update of the manifest
:- not permManifest(P,G,L,S+1), permManifest(P,G,L,S), not update(A,M2,S), installed(A,M,S+1), manifest(M2,U,D), usrP(D,P), defPerm(A,P,S+1), S<s.


% if installed, and no uninstall, then its still installed at S+1
installed(A,M,S+1) :- installed(A,M,S), not update(A,_,S), not uninstall(A,S), S<=s.

% first to def perm
defPerm(A,P,S+1) :- install(A,M,S), manifest(M,U,D), usrP(D,P), not defPerm(_,P,S).


% if perm def, and app not uninstalled, then the perm is still defined by the app at S+1
defPerm(A,P,S+1) :- not update(A,_,S), not uninstall(A,S), defPerm(A,P,S), S<=s.



% if it's installed, we cannot install it
:- install(A,_,S), installed(A,M,S).
%not install(A,M,S) :- installed(A,M,S).

% if it's not installed it cannot uninstall
:- uninstall(A,S), not installed(A,_,S).

%---------------------------%






%----- RUNNING / STOP ------%
% if installed and action run, then its running at S+1
running(A,S+1) :- run(A,S), installed(A,M,S).

% if its running, and neither uninstall action nor stop, then its running at S+1
running(A,S+1) :- not reboot(S), not update(A,_,S), not stop(A,S), not uninstall(A,S), running(A,S), S<=s.

% if it's running, we cannot run it
not run(A,S) :- running(A,S).

% if its not installed it cannot run
:- run(A,S), not installed(A,_,S).

% if not installed, then it cannot stop
:- stop(A,S), not installed(A,_,S).

% if its not running, it cannot stop
:- stop(A,S), not running(A,S).
%---------------------------%


%---------- GRANT ----------%

% a perm can be granted to an app, if this app is installed and the perm is in use in his manifest, and this perm is defined
granted(A,P,S+1) :- grant(A,P,S), installed(A,M,S), manifest(M,U,D), use(U,P), defPerm(_,P,S).
granted(A,P,S+1) :- grant(A,P,S), installed(A,M,S), manifest(M,U), use(U,P), defPerm(_,P,S).


%--- IMPORTANT FOR CVE-2021-0317 ---%
% the perm is still granted if we dont update a dangerous perm, if we dont reboot, and if we dont uninstall
granted(A,P,S+1) :- not updateDangerousPerm(P,S), not uninstall(A,S), granted(A,P,S), installed(A,M,S), manifest(M,U,D), use(U,P), defPerm(_,P,S+1), S<=s.
granted(A,P,S+1) :- not updateDangerousPerm(P,S), not uninstall(A,S), granted(A,P,S), installed(A,M,S), manifest(M,U), use(U,P), defPerm(_,P,S+1), S<=s.


% With the CVE-2021-0307, the perm is still normal and granted after update, because it prevents against upgrade-attacks
% so, by finding a way to refresh the manifest (reboot), the perm becomes dangerous, and the grants is keeped
% After fix, during the reboot, if the perm switch from normal to dangerous, then the grants is revoked.
% here, we dont revoke the grants when a perm is updated because of a reboot.
%-----------------------------------%





% the perm is still granted if we reboot and the perm is still normal (if after reboot the perm becomes dangerous its not more granted)
granted(A,P,S+1) :- reboot(S), granted(A,P,S), perm(P,0,1,S), perm(P,0,1,S+1), installed(A,M,S), manifest(M,U,D), use(U,P), defPerm(_,P,S).
granted(A,P,S+1) :- reboot(S), granted(A,P,S), perm(P,0,1,S), perm(P,0,1,S+1), installed(A,M,S), manifest(M,U), use(U,P), defPerm(_,P,S).


% package manager check at OS initialization if normal perm defined then granted, if its not the case
granted(A,P,S+1):- reboot(S), installed(A,M,S), perm(P,0,1,S+1), manifest(M,U,D), use(U,P), defPerm(_,P,S), not granted(A,P,S).
granted(A,P,S+1):- reboot(S), installed(A,M,S), perm(P,0,1,S+1), manifest(M,U), use(U,P), defPerm(_,P,S), not granted(A,P,S).







% if it's granted, we cannot grant it
not grant(A,P,S) :- granted(A,P,S).

% if not installed, then it cannot grant
:- grant(A,P,S), not installed(A,_,S).


% normal perms are mechanically granted at the installation, if the perm is defined
granted(A,P,S+1):- install(A,M,S), perm(P,0,1,S+1), manifest(M,U,D), use(U,P), defPerm(_,P,S+1).
granted(A,P,S+1):- install(A,M,S), perm(P,0,1,S+1), manifest(M,U), use(U,P), defPerm(_,P,S+1).


granted(A,P,S+1):- update(A2,M2,S), installed(A,M,S+1), perm(P,0,1,S+1), manifest(M,U,D), use(U,P), defPerm(A2,P,S+1).
granted(A,P,S+1):- update(A2,M2,S), installed(A,M,S+1), perm(P,0,1,S+1), manifest(M,U), use(U,P), defPerm(A2,P,S+1).

%---------------------------%






%------- GRANT-AUTO --------%

% a perm P2 can be granted to an app with the grantAuto action, if this app is installed, running and a perm P in the same group is granted to the app
% the multiple lines is to take in count permSyst

granted(A,P2,S+1) :- grantAuto(A,P2,S), installed(A,M,S), running(A,S), granted(A,P,S), manifest(M,U,D), use(U,P2), defPerm(_,P,S), defPerm(_,P2,S), perm(P,G,2,S), perm(P2,G,2,S), G!=0, P!=P2.

granted(A,P2,S+1) :- grantAuto(A,P2,S), installed(A,M,S), running(A,S), granted(A,P,S), manifest(M,U,D), use(U,P2), defPerm(_,P,S), defPerm(_,P2,S), perm(P,G,2,S), permSyst(P2,G,2), G!=0, P!=P2.

granted(A,P2,S+1) :- grantAuto(A,P2,S), installed(A,M,S), running(A,S), granted(A,P,S), manifest(M,U,D), use(U,P2), defPerm(_,P,S), defPerm(_,P2,S), permSyst(P,G,2), perm(P2,G,2,S), G!=0, P!=P2.


granted(A,P2,S+1) :- grantAuto(A,P2,S), installed(A,M,S), running(A,S), granted(A,P,S), manifest(M,U), use(U,P2), defPerm(_,P,S), defPerm(_,P2,S), perm(P,G,2,S), perm(P2,G,2,S), G!=0, P!=P2.

granted(A,P2,S+1) :- grantAuto(A,P2,S), installed(A,M,S), running(A,S), granted(A,P,S), manifest(M,U), use(U,P2), defPerm(_,P,S), defPerm(_,P2,S), perm(P,G,2,S), permSyst(P2,G,2), G!=0, P!=P2.

granted(A,P2,S+1) :- grantAuto(A,P2,S), installed(A,M,S), running(A,S), granted(A,P,S), manifest(M,U), use(U,P2), defPerm(_,P,S), defPerm(_,P2,S), permSyst(P,G,2), perm(P2,G,2,S), G!=0, P!=P2.







% if P granted, we cannot autogrant it
not grantAuto(A,P,S) :- granted(A,P,S).

% if not installed, running and perm def, then we cannot grantAuto
:- grantAuto(A,P,S), not installed(A,_,S).
:- grantAuto(A,P,S), not running(A,S).
:- grantAuto(A,P,S), not defPerm(_,P,S).


% if a perm is granted, then we can grantAuto (grantAutoOK)
grantAutoOK(A,P2,S) :- granted(A,P,S), installed(A,M,S), manifest(M,U,D), use(U,P), use(U,P2), defPerm(_,P2,S), defPerm(_,P,S), perm(P,G,2,S), perm(P2,G,2,S), P!=P2, G!=0, not granted(A,P2,S).

grantAutoOK(A,P2,S) :- granted(A,P,S), installed(A,M,S), manifest(M,U,D), use(U,P), use(U,P2), defPerm(_,P2,S), defPerm(_,P,S), perm(P,G,2,S), permSyst(P2,G,2), P!=P2, G!=0, not granted(A,P2,S).

grantAutoOK(A,P2,S) :- granted(A,P,S), installed(A,M,S), manifest(M,U,D), use(U,P), use(U,P2), defPerm(_,P2,S), defPerm(_,P,S), permSyst(P,G,2), perm(P2,G,2,S), P!=P2, G!=0, not granted(A,P2,S).

grantAutoOK(A,P2,S) :- granted(A,P,S), installed(A,M,S), manifest(M,U), use(U,P), use(U,P2), defPerm(_,P2,S), defPerm(_,P,S), perm(P,G,2,S), perm(P2,G,2,S), P!=P2, G!=0, not granted(A,P2,S).

grantAutoOK(A,P2,S) :- granted(A,P,S), installed(A,M,S), manifest(M,U), use(U,P), use(U,P2), defPerm(_,P2,S), defPerm(_,P,S), perm(P,G,2,S), permSyst(P2,G,2), P!=P2, G!=0, not granted(A,P2,S).

grantAutoOK(A,P2,S) :- granted(A,P,S), installed(A,M,S), manifest(M,U), use(U,P), use(U,P2), defPerm(_,P2,S), defPerm(_,P,S), permSyst(P,G,2), perm(P2,G,2,S), P!=P2, G!=0, not granted(A,P2,S).

% if we dont have a grantAutoOK, then we cannot grantAuto
:- grantAuto(A,P,S), not grantAutoOK(A,P,S).



%---------------------------%









%--------- UPDATE ----------%


installed(A,M2,S+1) :- update(A,M2,S), installed(A,M,S).

% if it's not installed it cannot uninstall
:- update(A,M,S), not installed(A,_,S).


% perm defined by it
defPerm(A,P,S+1) :- update(A,M,S), manifest(M,U,D), usrP(D,P), defPerm(A,P,S).

% perm not defined
defPerm(A,P,S+1) :- update(A,M,S), manifest(M,U,D), usrP(D,P), not defPerm(_,P,S).



% if we update from normal to dangerous
updateNormalToDangerousPerm(P,S) :- update(A,M2,S), manifest(M2,U2,D2), usrP(D2,P), defPerm(A,P,S), installed(A,M,S), manifest(M,U,D), usrP(D,P), perm(P,0,1,S), permManifest(P,_,2,S+1).

% if we update dangerous perm
updateDangerousPerm(P,S) :- update(A,M2,S), manifest(M2,U2,D2), usrP(D2,P), defPerm(A,P,S), installed(A,M,S), manifest(M,U,D), usrP(D,P), permManifest(P,G,2,S), permManifest(P,G2,2,S+1), G!=G2.


newPermManifest(P,S+1) :- permManifest(P,G,L,S), permManifest(P,G2,L2,S+1), G2!=G, L2!=L.
newPermManifest(P,S+1) :- permManifest(P,0,L,S), permManifest(P,0,L2,S+1), L2!=L.
newPermManifest(P,S+1) :- permManifest(P,G,L,S), permManifest(P,G2,L,S+1), G2!=G.

:- update(A,M2,S), manifest(M2,U2,D2), usrP(D2,P), installed(A,M,S), manifest(M,U,D), usrP(D,P), permManifest(P,G,L,S), not newPermManifest(P,S+1).



%---------------------------%





%--------- REBOOT ----------%


% if try to def perm already defined
tryDefPerm(A,P,S+1) :- install(A,M,S), manifest(M,U,D), usrP(D,P), defPerm(_,P,S). % ca ok par rapport à celle au dessus

tryDefPerm(A,P,S+1) :- tryDefPerm(A,P,S), installed(A,M,S+1), not defPerm(A,P,S), S<=s. % ok par rapport à celle au dessus aussi



% if more than one app try to defPerm then we check the first that tried
multipleTry(P,S) :- tryDefPerm(A,P,S), tryDefPerm(A2,P,S).

% the first that tried to def the perm
defPerm(A2,P,S+1):- multipleTry(P,S), reboot(S), not defPerm(_,P,S), install(A2,M2,Smin-1), tryDefPerm(A2,P,Smin), tryDefPerm(A3,P,Smax), Smin<Smax, Smax<S, installed(A2,M2,S).


% otherwise we install the one that tried
defPerm(A,P,S+1) :- reboot(S), not defPerm(_,P,S), tryDefPerm(A,P,S), not multipleTry(P,S), app(A2).


%---------------------------%





%:- not use(1,1).
%:- not use(1,2).
%:- not usrP(2,2).
%:- not manifest(2,1,2).

%:- not permManifest(2,0,1,1).

%:- not perm(2,1,2,4).

%:- not install(2,2,1).
%:- not update(2,2,2).
%:- not reboot(3).
%:- not run(2,4).
%:- not grantAuto(2,1,5).





:- grant(_,_,_).								% we cannot use grant action
:- not granted(A,P,S), A=as+1, P=as, S=s+1.		% the system perm is granted to the user's app at the end